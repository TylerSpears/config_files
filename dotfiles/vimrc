" Vim configuration file
" Collected from various sources, including (but not limited to):
" - https://github.com/nickjj/dotfiles/blob/master/.vimrc
"

set nocompatible              " be iMproved, required

" automatically download vim-plug if not already done
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" begin vim-plug declarations
call plug#begin('~/.vim/bundle')

" General settings
Plug 'junegunn/vim-plug'
Plug 'tpope/vim-sensible'
Plug 'editorconfig/editorconfig-vim'

" Navigation plugins
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'https://github.com/tmhedberg/SimpylFold.git'
" Drastically improve insert mode performance in files with folds.
Plug 'Konfekt/FastFold'

" Pass focus events from tmux to Vim (useful for autoread and linting tools).
Plug 'tmux-plugins/vim-tmux-focus-events'

" Python plugins
Plug 'vim-python/python-syntax'
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'vim-scripts/indentpython.vim'

Plug 'othree/html5.vim'
Plug 'pangloss/vim-javascript'
Plug 'vimwiki/vimwiki'

" YAML plugins
Plug 'stephpy/vim-yaml'

" Markdown plugins
Plug 'godlygeek/tabular' | Plug 'plasticboy/vim-markdown'
"Plug 'JamshedVesuna/vim-markdown-preview'
" If you don't have nodejs and yarn
" use pre build
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }"
Plug 'dhruvasagar/vim-table-mode'

" end vim-plug declarations
call plug#end()

let python_highlight_all=1
syntax enable
syntax on

" enable global clipboard yanking
set clipboard=unnamedplus

" set mouse to all modes
" intended for scrolling without moving cursor
set mouse=a

" line numbering
set number
" improved search viewing
set incsearch
set hlsearch

" turn off search highlight with \<space>
" or whatever <leader><space> is set to
nnoremap <leader><space> :nohlsearch<CR>

" highlights matching [{()}]
set showmatch

" number of visual spaces per TAB
set tabstop=4
" how many spaces a tab is when editing
set softtabstop=4
" turns tabs into spaces
set expandtab

" colorscheming
set background=dark
let g:solarized_visibility = "high"
let g:solarized_contrast = "high"
let g:solarized_termcolors = 256
colorscheme solarized

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Enable folding
set foldmethod=indent
set foldlevel=99
" Enable folding with the spacebar
nnoremap <space> za

" set PEP8 compliant properties for .py files
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

" flag unnecessary whitespace
highlight BadWhitespace ctermbg=red guibg=darkred
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

set encoding=utf-8

" NERDTREE ignores all *.pyc files
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree
" start NERDTree automatically when opening a directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
" Ctrl+n shortcut to open NERDTree
map <C-n> :NERDTreeToggle<CR>

" highlight column index 80 to encourage better coding practice
" according to PEP 8 standard
set cc=79

" plasticboy/vim-markdown
" Enable extensions for `vim-markdown`, see 
" <https://github.com/plasticboy/vim-markdown#syntax-extensions>
" - TAS 8/18/2019
let g:vim_markdown_math = 1
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_strikethrough = 1
set conceallevel=2
let g:vim_markdown_conceal = 1

autocmd FileType markdown let b:sleuth_automatic=0
autocmd FileType markdown set conceallevel=0
autocmd FileType markdown normal zR

" iamcco/markdown-preview.nvim
let g:mkdp_refresh_slow=1

" Configurations for `vim-table-mode`
" - TAS 8/18/2019
let g:table_mode_corner='|'
let g:table_mode_corner_corner='|'
let g:table_mode_header_fillchar='-'
" quickly enable / disable table mode in insert mode by using `||` or `--`,
" respectively
function! s:isAtStartOfLine(mapping)
  let text_before_cursor = getline('.')[0 : col('.')-1]
  let mapping_pattern = '\V' . escape(a:mapping, '\')
  let comment_pattern = '\V' . escape(substitute(&l:commentstring, '%s.*$', '', ''), '\')
  return (text_before_cursor =~? '^' . ('\v(' . comment_pattern . '\v)?') . '\s*\v' . mapping_pattern . '\v$')
endfunction

inoreabbrev <expr> <bar><bar>
          \ <SID>isAtStartOfLine('\|\|') ?
          \ '<c-o>:TableModeEnable<cr><bar><space><bar><left><left>' : '<bar><bar>'
inoreabbrev <expr> __
          \ <SID>isAtStartOfLine('__') ?
          \ '<c-o>:silent! TableModeDisable<cr>' : '__'



